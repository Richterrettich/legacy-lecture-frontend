// Generated by CoffeeScript 1.8.0
(function() {
  var SocketEndPoint, endpoint;

  endpoint = angular.module("interactiveLecture.codeArea.endPointServices", []);

  SocketEndPoint = (function() {
    function SocketEndPoint(timeout) {
      this.timeout = timeout;
      this.resultHandlers = [];
      this.timeoutPromise = null;
    }

    SocketEndPoint.prototype.registerResultHandler = function(handler) {
      return this.resultHandlers.push(handler);
    };

    SocketEndPoint.prototype.setUp = function(_arg) {
      var inputEventName, options, resultEventName, url, _ref;
      _ref = _arg != null ? _arg : {}, url = _ref.url, options = _ref.options, inputEventName = _ref.inputEventName, resultEventName = _ref.resultEventName;
      if (this.socket != null) {
        throw new Erorr("socket already up and running! you need to call tearDown first.");
      }
      this.inputEventName = inputEventName || "inputData";
      this.resultEventName = resultEventName || "result";
      if (url && options) {
        this.socket = io.connect(url, options);
      } else if (url) {
        this.socket = io.connect(url);
      } else if (options) {
        this.socket = io.connect(null, options);
      } else {
        this.socket = io.connect();
      }
      return this.socket.on(this.resultEventName, (function(_this) {
        return function(data) {
          var resultObject;
          resultObject = {};
          if (typeof data === "string") {
            resultObject = JSON.parse(data);
          } else if (typeof data === "object") {
            resultObject = data;
          } else {
            throw new Error("illegal service output data type");
          }
          return angular.forEach(_this.resultHandlers, function(handler) {
            return handler(resultObject);
          });
        };
      })(this));
    };

    SocketEndPoint.prototype.input = function(data, delay) {
      if ((delay != null) && delay > 0) {
        if (this.timeoutPromis) {
          this.timeout.cancel(this.timeoutPromis);
        }
        return this.timeoutPromis = this.timeout(((function(_this) {
          return function() {
            return _this.socket.emit(_this.inputEventName, data);
          };
        })(this)), delay);
      } else {
        return this.socket.emit("inputData", data);
      }
    };

    SocketEndPoint.prototype.tearDown = function() {
      this.socket.disconnect();
      return this.socket = null;
    };

    return SocketEndPoint;

  })();

  endpoint.service("socketEndpointService", ["$timeout", SocketEndPoint]);

}).call(this);

//# sourceMappingURL=code_area_endpoints.js.map

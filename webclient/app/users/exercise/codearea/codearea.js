// Generated by CoffeeScript 1.8.0
(function() {
  'use strict';
  var CodeAreaMainCtrl, app;

  app = angular.module("interactiveLecture.codeArea", ['ui.ace', 'ui.bootstrap', "interactiveLecture.codeArea.controllers", "interactiveLecture.codeTabServices"]);

  app.directive("codeArea", function() {
    return {
      restrict: "E",
      templateUrl: "exercise/codearea/codearea.html",
      require: ["endpointService", "endpointServiceConfiguration"],
      scope: {
        endpointService: "@endpointService",
        endpointServiceConfiguration: "=endpointServiceConfiguration"
      },
      controller: CodeAreaMainCtrl,
      controllerAs: 'codeAreaMainCtrl'
    };
  });

  CodeAreaMainCtrl = [
    "$scope", "$timeout", "$injector", "$controller", "$modal", "tabListService", function($scope, $timeout, $injector, $controller, $modal, tabListService) {
      var endpoint, tabController;
      $scope.language = $scope.$parent.language;
      $scope.exerciseId = $scope.$parent.exerciseId;
      $scope.courseId = $scope.$parent.courseId;
      $scope.chapterId = $scope.$parent.chapterId;
      $scope.sectionId = $scope.$parent.sectionId;
      endpoint = $injector.get($scope.endpointService);
      endpoint.setUp($scope.endpointServiceConfiguration);
      endpoint.registerResultHandler((function(_this) {
        return function(resultObject) {
          var errorTabIds;
          errorTabIds = [];
          if (resultObject.errors.length > 0) {
            $scope.$emit("errors");
            resultObject.errors.forEach(function(err) {
              errorTabIds.push(err.tabId);
              return tabListService.addAnnotation(err.tabId, err);
            });
            return Object.keys(_this.tabs).forEach(function(k) {
              if (errorTabIds.indexOf(parseInt(k)) === -1) {
                return _this.tabs[k].clearAnnotations();
              }
            });
          } else {
            tabListService.clearAnnotations();
            return $scope.$emit("no-errors");
          }
        };
      })(this));
      $scope.$on("destroy", function() {
        tabListService.removeAllTabs();
        return endpoint.tearDown();
      });
      tabController = "" + ($scope.language.capitalize()) + "Controller";
      this.tabs = tabListService.tabs;
      this.addTab = function() {
        var t;
        t = tabListService.addTab($scope.language);
        t.setTabController($controller(tabController, {
          $scope: $scope.$new()
        }));
        return console.log(this.tabs);
      };
      this.addTab($scope.language);
      this.getTab = function(id) {
        return tabListService.getTab(id);
      };
      return this.removeTab = function(tab, event) {
        var modalInstance;
        event.preventDefault();
        modalInstance = $modal.open({
          templateUrl: 'exercise/codearea/delete-modal-template.html',
          controller: 'DeleteModalController',
          size: "sm"
        });
        return modalInstance.result.then((function(_this) {
          return function(closeResult) {
            if (closeResult === 'ok') {
              if (Object.keys(tabListService.tabs).length > 1) {
                return tabListService.removeTab(tab.id);
              } else {
                return tabListService.clearTab(tab.id);
              }
            }
          };
        })(this));
      };
    }
  ];

  app.controller("DeleteModalController", [
    "$scope", "$modalInstance", function($scope, $modalInstance) {
      $scope.ok = function() {
        return $modalInstance.close("ok");
      };
      return $scope.cancel = function() {
        return $modalInstance.dismiss('cancel');
      };
    }
  ]);

}).call(this);

//# sourceMappingURL=codearea.js.map
